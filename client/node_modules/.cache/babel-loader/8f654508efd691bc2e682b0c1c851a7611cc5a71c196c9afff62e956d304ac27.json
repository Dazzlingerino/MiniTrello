{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { GET_COLUMNS, ADD_CARD, MOVE_CARD, DELETE_CARD, CHANGE_USER } from '../../../graphql/queries';\nconst useBoard = () => {\n  _s();\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_COLUMNS);\n  const [columns, setColumns] = useState([]);\n  console.log('ðŸš€ ~ useBoard ~ columns:', columns);\n  const [addCardMutation] = useMutation(ADD_CARD);\n  const [moveCardMutation] = useMutation(MOVE_CARD);\n  const [deleteCardMutation] = useMutation(DELETE_CARD);\n  const [changeUserMutation] = useMutation(CHANGE_USER);\n  const [draggedCard, setDraggedCard] = useState(null);\n  const [users, setUsers] = useState([]);\n  const sortCardsInColumn = (columnId, sortOrder) => {\n    const sortedColumns = columns.map(column => {\n      if (column.id === columnId) {\n        const sortedCards = [...column.cards];\n        console.log('ðŸš€ ~ sortedColumns ~ sortedCards:', sortedCards);\n        if (sortOrder === 'creationDate') {\n          sortedCards.sort((a, b) => new Date(a.creationDate).getTime() - new Date(b.creationDate).getTime());\n        } else if (sortOrder === 'customOrder') {\n          sortedCards.sort((a, b) => a.customOrder - b.customOrder);\n        }\n        return {\n          ...column,\n          cards: sortedCards\n        };\n      }\n      return column;\n    });\n    setColumns(sortedColumns);\n  };\n  const onAddCard = async (columnId, text) => {\n    if (!text.trim()) return; // Prevent adding empty cards\n\n    await addCardMutation({\n      variables: {\n        columnId,\n        text\n      },\n      update: (cache, {\n        data: {\n          addCard\n        }\n      }) => {\n        const existingData = cache.readQuery({\n          query: GET_COLUMNS\n        });\n        if (!existingData) return;\n        const newColumns = existingData.getColumns.map(column => {\n          if (column.id === columnId) {\n            // Assuming your backend returns the updated column after adding a card\n            return {\n              ...column,\n              cards: [...column.cards, addCard]\n            };\n          }\n          return column;\n        });\n        cache.writeQuery({\n          query: GET_COLUMNS,\n          data: {\n            getColumns: newColumns\n          }\n        });\n      }\n    });\n    // Optionally clear the input field for this column in the state here if not done elsewhere\n  };\n  const onDeleteCard = async cardId => {\n    await deleteCardMutation({\n      variables: {\n        cardId\n      },\n      update: cache => {\n        // Read the current state of the columns from the cache\n        const existingData = cache.readQuery({\n          query: GET_COLUMNS\n        });\n        if (!existingData) return;\n\n        // Clone the existing columns to avoid direct mutation\n        const newColumns = existingData.getColumns.map(column => {\n          // Filter out the deleted card from each column's cards\n          const filteredCards = column.cards.filter(card => card.id !== cardId);\n          return {\n            ...column,\n            cards: filteredCards\n          };\n        });\n\n        // Write the updated columns back to the cache\n        cache.writeQuery({\n          query: GET_COLUMNS,\n          data: {\n            getColumns: newColumns\n          }\n        });\n      }\n    });\n  };\n  const onDragEnd = async result => {\n    const {\n      draggableId,\n      source,\n      destination\n    } = result;\n\n    // Check if there's a destination and the card is moved to a new place\n    if (!destination || destination.droppableId === source.droppableId && destination.index === source.index) {\n      return; // Do nothing if there's no destination or the card was dropped back to its original place\n    }\n    await moveCardMutation({\n      variables: {\n        cardId: draggableId,\n        newColumnId: destination.droppableId\n      },\n      optimisticResponse: {\n        moveCard: {\n          __typename: 'Card',\n          id: draggableId,\n          columnId: destination.droppableId\n        }\n      },\n      update: cache => {\n        const existingData = cache.readQuery({\n          query: GET_COLUMNS\n        });\n        if (!existingData) return;\n\n        // Cloning the existing columns to avoid direct mutation\n        const newColumns = existingData.getColumns.map(column => ({\n          ...column,\n          cards: [...column.cards]\n        }));\n\n        // Find and remove the card from its original column\n        const sourceColumnIndex = newColumns.findIndex(column => column.id === source.droppableId);\n        const cardIndex = newColumns[sourceColumnIndex].cards.findIndex(card => card.id === draggableId);\n        const [movedCard] = newColumns[sourceColumnIndex].cards.splice(cardIndex, 1);\n\n        // Add the card to its new column\n        const destinationColumnIndex = newColumns.findIndex(column => column.id === destination.droppableId);\n        newColumns[destinationColumnIndex].cards.splice(destination.index, 0, movedCard);\n\n        // Write the updated columns back to the cache\n        cache.writeQuery({\n          query: GET_COLUMNS,\n          data: {\n            getColumns: newColumns\n          }\n        });\n      }\n    });\n  };\n  const onUserSelect = async (cardId, user) => {\n    await changeUserMutation({\n      variables: {\n        cardId,\n        assignedUser: user.id\n      },\n      update: cache => {\n        const existingData = cache.readQuery({\n          query: GET_COLUMNS\n        });\n        if (!existingData) return;\n\n        // Create a new array with updated cards\n        const newColumns = existingData.getColumns.map(column => {\n          const newCards = column.cards.map(card => {\n            if (card.id === cardId) {\n              // Update the card with the new assigned user\n              return {\n                ...card,\n                assignedUser: user.id\n              };\n            }\n            return card;\n          });\n          return {\n            ...column,\n            cards: newCards\n          };\n        });\n\n        // Write the updated columns back to the cache\n        cache.writeQuery({\n          query: GET_COLUMNS,\n          data: {\n            getColumns: newColumns\n          }\n        });\n      }\n    }).catch(error => console.error('Failed to assign user to card:', error));\n  };\n  useEffect(() => {\n    if (!loading && data) {\n      setColumns(data.getColumns || []);\n      setUsers(data.getUsers || []);\n    }\n  }, [loading, data]);\n  return {\n    loading,\n    error,\n    columns,\n    draggedCard,\n    users,\n    setDraggedCard,\n    onAddCard,\n    onDragEnd,\n    onDeleteCard,\n    onUserSelect,\n    sortCardsInColumn\n  };\n};\n_s(useBoard, \"d/h7A5RB5l8QSMQ34A9Jk62o8c4=\", false, function () {\n  return [useQuery, useMutation, useMutation, useMutation, useMutation];\n});\nexport default useBoard;","map":{"version":3,"names":["useEffect","useState","useMutation","useQuery","GET_COLUMNS","ADD_CARD","MOVE_CARD","DELETE_CARD","CHANGE_USER","useBoard","_s","loading","error","data","columns","setColumns","console","log","addCardMutation","moveCardMutation","deleteCardMutation","changeUserMutation","draggedCard","setDraggedCard","users","setUsers","sortCardsInColumn","columnId","sortOrder","sortedColumns","map","column","id","sortedCards","cards","sort","a","b","Date","creationDate","getTime","customOrder","onAddCard","text","trim","variables","update","cache","addCard","existingData","readQuery","query","newColumns","getColumns","writeQuery","onDeleteCard","cardId","filteredCards","filter","card","onDragEnd","result","draggableId","source","destination","droppableId","index","newColumnId","optimisticResponse","moveCard","__typename","sourceColumnIndex","findIndex","cardIndex","movedCard","splice","destinationColumnIndex","onUserSelect","user","assignedUser","newCards","catch","getUsers"],"sources":["/Users/dazzlinger/Desktop/start_here/TaskFlow/client/src/main/components/Board/hook.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { type  DropResult } from 'react-beautiful-dnd'\nimport { useMutation, useQuery } from '@apollo/client'\nimport { GET_COLUMNS, ADD_CARD, MOVE_CARD, DELETE_CARD, CHANGE_USER } from '../../../graphql/queries'\nimport { type User, type BoardData, type Column } from '../../types'\n\nexport interface UseBoardReturn {\n  loading: boolean\n  error: Error | undefined\n  columns: Column[] | undefined\n  draggedCard: string | null\n  users: User[]\n  setDraggedCard: (cardId: string | null) => void\n  onAddCard: (columnId: string, text: string) => Promise<void>\n  onDragEnd: (result: any) =>  Promise<void>\n  onDeleteCard: (cardId: string) => Promise<void>\n  onUserSelect: (cardId: string, user: User) => Promise<void>\n  sortCardsInColumn: (columnId: string, sortOrder: string) => void\n}\n\nconst useBoard = (): UseBoardReturn => {\n  const { loading, error, data } = useQuery<BoardData>(GET_COLUMNS)\n  const [columns, setColumns] = useState<Column[]>([])\n  console.log('ðŸš€ ~ useBoard ~ columns:', columns)\n  const [addCardMutation] = useMutation(ADD_CARD)\n  const [moveCardMutation] = useMutation(MOVE_CARD)\n  const [deleteCardMutation] = useMutation(DELETE_CARD)\n  const [changeUserMutation] = useMutation(CHANGE_USER)\n  const [draggedCard, setDraggedCard] = useState<string | null>(null)\n  const [users, setUsers] = useState<User[]>([])\n\n  const sortCardsInColumn = (columnId: string, sortOrder: string) => {\n    const sortedColumns = columns.map(column => {\n      if (column.id === columnId) {\n        const sortedCards = [...column.cards]\n        console.log('ðŸš€ ~ sortedColumns ~ sortedCards:', sortedCards)\n        if (sortOrder === 'creationDate') {\n          sortedCards.sort((a, b) => new Date(a.creationDate).getTime() - new Date(b.creationDate).getTime())\n        } else if (sortOrder === 'customOrder') {\n          sortedCards.sort((a, b) => a.customOrder - b.customOrder)\n        }\n        return { ...column, cards: sortedCards }\n      }\n      return column\n    })\n  \n    setColumns(sortedColumns)\n  }\n  \n  const onAddCard = async (columnId: string, text: string) => {\n    if (!text.trim()) return // Prevent adding empty cards\n\n    await addCardMutation({\n      variables: { columnId, text },\n      update: (cache, { data: { addCard } }) => {\n        const existingData = cache.readQuery<{ getColumns: Column[] }>({ query: GET_COLUMNS })\n        if (!existingData) return\n\n        const newColumns = existingData.getColumns.map(column => {\n          if (column.id === columnId) {\n          // Assuming your backend returns the updated column after adding a card\n            return { ...column, cards: [...column.cards, addCard] }\n          }\n          return column\n        })\n\n        cache.writeQuery({\n          query: GET_COLUMNS,\n          data: { getColumns: newColumns }\n        })\n      }\n    })\n  // Optionally clear the input field for this column in the state here if not done elsewhere\n  }\n\n  const onDeleteCard = async (cardId: string) => {\n    await deleteCardMutation({\n      variables: { cardId },\n      update: (cache) => {\n        // Read the current state of the columns from the cache\n        const existingData = cache.readQuery<{ getColumns: Column[] }>({ query: GET_COLUMNS })\n        if (!existingData) return\n  \n        // Clone the existing columns to avoid direct mutation\n        const newColumns = existingData.getColumns.map(column => {\n          // Filter out the deleted card from each column's cards\n          const filteredCards = column.cards.filter(card => card.id !== cardId)\n          return { ...column, cards: filteredCards }\n        })\n  \n        // Write the updated columns back to the cache\n        cache.writeQuery({\n          query: GET_COLUMNS,\n          data: { getColumns: newColumns }\n        })\n      }\n    })\n  }\n\n  const onDragEnd = async (result: DropResult) => {\n    const { draggableId, source, destination } = result\n  \n    // Check if there's a destination and the card is moved to a new place\n    if (!destination || (destination.droppableId === source.droppableId && destination.index === source.index)) {\n      return // Do nothing if there's no destination or the card was dropped back to its original place\n    }\n  \n    await moveCardMutation({\n      variables: {\n        cardId: draggableId,\n        newColumnId: destination.droppableId\n      },\n      optimisticResponse: {\n        moveCard: {\n          __typename: 'Card',\n          id: draggableId,\n          columnId: destination.droppableId\n        }\n      },\n      update: (cache) => {\n        const existingData = cache.readQuery<{ getColumns: Column[] }>({ query: GET_COLUMNS })\n        if (!existingData) return\n  \n        // Cloning the existing columns to avoid direct mutation\n        const newColumns = existingData.getColumns.map(column => ({ ...column, cards: [...column.cards] }))\n  \n        // Find and remove the card from its original column\n        const sourceColumnIndex = newColumns.findIndex(column => column.id === source.droppableId)\n        const cardIndex = newColumns[sourceColumnIndex].cards.findIndex(card => card.id === draggableId)\n        const [movedCard] = newColumns[sourceColumnIndex].cards.splice(cardIndex, 1)\n  \n        // Add the card to its new column\n        const destinationColumnIndex = newColumns.findIndex(column => column.id === destination.droppableId)\n        newColumns[destinationColumnIndex].cards.splice(destination.index, 0, movedCard)\n  \n        // Write the updated columns back to the cache\n        cache.writeQuery({\n          query: GET_COLUMNS,\n          data: { getColumns: newColumns }\n        })\n      }\n    })\n  }\n\n  const onUserSelect = async (cardId: string, user: User) => {\n    await changeUserMutation({\n      variables: { cardId, assignedUser: user.id },\n      update: (cache) => {\n        const existingData = cache.readQuery<{ getColumns: Column[] }>({ query: GET_COLUMNS })\n        if (!existingData) return\n\n        // Create a new array with updated cards\n        const newColumns = existingData.getColumns.map(column => {\n          const newCards = column.cards.map(card => {\n            if (card.id === cardId) {\n              // Update the card with the new assigned user\n              return { ...card, assignedUser: user.id }\n            }\n            return card\n          })\n          return { ...column, cards: newCards }\n        })\n\n        // Write the updated columns back to the cache\n        cache.writeQuery({\n          query: GET_COLUMNS,\n          data: { getColumns: newColumns }\n        })\n      }\n    }).catch(error => console.error('Failed to assign user to card:', error))\n  }\n\n  useEffect(() => {\n    if (!loading && data) {\n      setColumns(data.getColumns || [])\n      setUsers(data.getUsers || [])\n    }\n  }, [loading, data])\n\n  return {\n    loading,\n    error,\n    columns,\n    draggedCard,\n    users,\n    setDraggedCard,\n    onAddCard,\n    onDragEnd,\n    onDeleteCard,\n    onUserSelect,\n    sortCardsInColumn\n  }\n}\n\nexport default useBoard\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}