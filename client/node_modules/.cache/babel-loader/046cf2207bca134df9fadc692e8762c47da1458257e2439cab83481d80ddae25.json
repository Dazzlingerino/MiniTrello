{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { GET_COLUMNS, ADD_CARD, MOVE_CARD, DELETE_CARD, CHANGE_USER } from '../graphql/queries';\nconst useTaskFlow = () => {\n  _s();\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_COLUMNS);\n  const [columns, setColumns] = useState([]);\n  const [addCardMutation] = useMutation(ADD_CARD);\n  const [moveCardMutation] = useMutation(MOVE_CARD);\n  const [deleteCardMutation] = useMutation(DELETE_CARD);\n  const [changeUserMutation] = useMutation(CHANGE_USER);\n  const [newCardText, setNewCardText] = useState('');\n  const [draggedCard, setDraggedCard] = useState(null);\n  const [users, setUsers] = useState([]);\n  const handleAddCard = async columnId => {\n    await addCardMutation({\n      variables: {\n        columnId,\n        text: newCardText\n      },\n      update: (cache, {\n        data: {\n          addCard\n        }\n      }) => {\n        const existingData = cache.readQuery({\n          query: GET_COLUMNS\n        });\n        const newColumns = existingData === null || existingData === void 0 ? void 0 : existingData.getColumns.map(column => {\n          if (column.id === columnId) {\n            return {\n              ...column,\n              cards: [...column.cards, addCard]\n            };\n          }\n          return column;\n        });\n        cache.writeQuery({\n          query: GET_COLUMNS,\n          data: {\n            columns: newColumns\n          }\n        });\n      }\n    });\n    setNewCardText('');\n  };\n  const handleMoveCard = async (cardId, newColumnId) => {\n    await moveCardMutation({\n      variables: {\n        cardId,\n        newColumnId\n      }\n    });\n  };\n  const handleDeleteCard = async cardId => {\n    await deleteCardMutation({\n      variables: {\n        cardId\n      }\n    });\n  };\n  const onUserSelect = async ({\n    cardId,\n    user\n  }) => {\n    await changeUserMutation({\n      variables: {\n        cardId,\n        assignedUser: user.id\n      }\n    });\n  };\n  const handleDragStart = cardId => {\n    setDraggedCard(cardId);\n  };\n  const handleDragEnd = () => {\n    setDraggedCard(null);\n  };\n  const handleDrop = async columnId => {\n    if (draggedCard) {\n      await handleMoveCard(draggedCard, columnId);\n    }\n  };\n  useEffect(() => {\n    if (!loading && data) {\n      setColumns(data.getColumns);\n      setUsers(data.getUsers);\n    }\n  }, [loading, data]);\n  return {\n    loading,\n    error,\n    columns,\n    newCardText,\n    draggedCard,\n    users,\n    onUserSelect,\n    setNewCardText,\n    setDraggedCard,\n    handleAddCard,\n    handleDragStart,\n    handleDragEnd,\n    handleDrop,\n    handleDeleteCard\n  };\n};\n_s(useTaskFlow, \"LffhRVbkpX8S4toBrUv6twPdZhk=\", false, function () {\n  return [useQuery, useMutation, useMutation, useMutation, useMutation];\n});\nexport default useTaskFlow;","map":{"version":3,"names":["useEffect","useState","useMutation","useQuery","GET_COLUMNS","ADD_CARD","MOVE_CARD","DELETE_CARD","CHANGE_USER","useTaskFlow","_s","loading","error","data","columns","setColumns","addCardMutation","moveCardMutation","deleteCardMutation","changeUserMutation","newCardText","setNewCardText","draggedCard","setDraggedCard","users","setUsers","handleAddCard","columnId","variables","text","update","cache","addCard","existingData","readQuery","query","newColumns","getColumns","map","column","id","cards","writeQuery","handleMoveCard","cardId","newColumnId","handleDeleteCard","onUserSelect","user","assignedUser","handleDragStart","handleDragEnd","handleDrop","getUsers"],"sources":["/Users/dazzlinger/Desktop/start_here/TaskFlow/client/src/main/hook.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { useMutation, useQuery } from '@apollo/client'\nimport { GET_COLUMNS, ADD_CARD, MOVE_CARD, DELETE_CARD, CHANGE_USER } from '../graphql/queries'\nimport { type User, type BoardData, type Column } from './types'\n\nexport interface UseTaskFlowReturn {\n  loading: boolean;\n  error: Error | undefined;\n  columns: Column[] | undefined;\n  newCardText: string;\n  draggedCard: string | null;\n  users: User[];\n  onUserSelect: ({ cardId, user }: { cardId: string, user: User }) => Promise<void>;\n  setNewCardText: (text: string) => void;\n  setDraggedCard: (cardId: string | null) => void;\n  handleAddCard: (columnId: string) => Promise<void>;\n  handleDragStart: (cardId: string) => void;\n  handleDragEnd: () => void;\n  handleDrop: (columnId: string) => Promise<void>;\n  handleDeleteCard: (cardId: string) => Promise<void>;\n}\n\nconst useTaskFlow = (): UseTaskFlowReturn => {\n  const { loading, error, data } = useQuery<BoardData>(GET_COLUMNS)\n  const [columns, setColumns] = useState<Column[]>([])\n  const [addCardMutation] = useMutation(ADD_CARD)\n  const [moveCardMutation] = useMutation(MOVE_CARD)\n  const [deleteCardMutation] = useMutation(DELETE_CARD)\n  const [changeUserMutation] = useMutation(CHANGE_USER)\n  const [newCardText, setNewCardText] = useState('')\n  const [draggedCard, setDraggedCard] = useState<string | null>(null)\n  const [users, setUsers] = useState<User[]>([])\n\n  const handleAddCard = async (columnId: string) => {\n    await addCardMutation({\n      variables: { columnId, text: newCardText },\n      update: (cache, { data: { addCard } }) => {\n        const existingData = cache.readQuery<BoardData>({ query: GET_COLUMNS })\n        const newColumns = existingData?.getColumns.map(column => {\n          if (column.id === columnId) {\n            return { ...column, cards: [...column.cards, addCard] }\n          }\n          return column\n        })\n        cache.writeQuery({\n          query: GET_COLUMNS,\n          data: { columns: newColumns }\n        })\n      }\n    })\n    setNewCardText('')\n  }\n\n  const handleMoveCard = async (cardId: string, newColumnId: string) => {\n    await moveCardMutation({\n      variables: { cardId, newColumnId }\n    })\n  }\n\n  const handleDeleteCard = async (cardId: string) => {\n    await deleteCardMutation({\n      variables: { cardId }\n    })\n  }\n\n  const onUserSelect = async ({ cardId, user }: { cardId: string, user: User }) => {\n    await changeUserMutation({\n      variables: { cardId, assignedUser: user.id }\n    })\n  }\n\n  const handleDragStart = (cardId: string) => {\n    setDraggedCard(cardId)\n  }\n\n  const handleDragEnd = () => {\n    setDraggedCard(null)\n  }\n\n  const handleDrop = async (columnId: string) => {\n    if (draggedCard) {\n      await handleMoveCard(draggedCard, columnId)\n    }\n  }\n\n  useEffect(() => {\n    if (!loading && data) {\n      setColumns(data.getColumns)\n      setUsers(data.getUsers)\n    }\n  }, [loading, data])\n\n  return {\n    loading,\n    error,\n    columns,\n    newCardText,\n    draggedCard,\n    users,\n    onUserSelect,\n    setNewCardText,\n    setDraggedCard,\n    handleAddCard,\n    handleDragStart,\n    handleDragEnd,\n    handleDrop,\n    handleDeleteCard\n  }\n}\n\nexport default useTaskFlow"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}