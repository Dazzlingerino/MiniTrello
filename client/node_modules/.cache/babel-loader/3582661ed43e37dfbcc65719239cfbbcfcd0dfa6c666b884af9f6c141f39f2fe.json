{"ast":null,"code":"var _jsxFileName = \"/Users/dazzlinger/Desktop/start_here/TaskFlow/client/src/main/TaskFlow.tsx\",\n  _s = $RefreshSig$();\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport Column from 'main/components/Column';\nimport Card from 'main/components/Card';\nimport useTaskFlow from 'main/hook';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskFlow = () => {\n  _s();\n  const {\n    loading,\n    error,\n    columns,\n    users,\n    onDeleteCard,\n    onDragEnd,\n    setDraggedCard,\n    onUserSelect,\n    onAddCard\n  } = useTaskFlow();\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragStart: start => setDraggedCard(start.draggableId),\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-3 grid-rows-1 gap-4\",\n      children: columns === null || columns === void 0 ? void 0 : columns.map(column => /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: String(column.id),\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: provided.innerRef,\n          ...provided.droppableProps,\n          className: \"grid min-w-[240px] auto-cols-min rounded bg-gray-100 p-4\",\n          children: /*#__PURE__*/_jsxDEV(Column, {\n            id: column.id,\n            title: column.title,\n            onAddCard: onAddCard // Passed from useTaskFlow hook\n            ,\n            children: [column.cards.map((card, index) => {\n              var _users$find;\n              return /*#__PURE__*/_jsxDEV(Card, {\n                id: card.id,\n                index: index,\n                text: card.text,\n                assignedUser: (_users$find = users.find(user => user.id === card.assignedUser)) !== null && _users$find !== void 0 ? _users$find : null,\n                users: users,\n                onUserSelect: onUserSelect,\n                onDeleteCard: () => onDeleteCard(card.id)\n              }, card.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 21\n              }, this);\n            }), provided.placeholder]\n          }, column.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 15\n        }, this)\n      }, column.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskFlow, \"0B8rauD4p4qgC1tOutWyiAYprbE=\", false, function () {\n  return [useTaskFlow];\n});\n_c = TaskFlow;\nexport default TaskFlow;\nvar _c;\n$RefreshReg$(_c, \"TaskFlow\");","map":{"version":3,"names":["DragDropContext","Droppable","Column","Card","useTaskFlow","jsxDEV","_jsxDEV","TaskFlow","_s","loading","error","columns","users","onDeleteCard","onDragEnd","setDraggedCard","onUserSelect","onAddCard","children","fileName","_jsxFileName","lineNumber","columnNumber","message","onDragStart","start","draggableId","className","map","column","droppableId","String","id","provided","ref","innerRef","droppableProps","title","cards","card","index","_users$find","text","assignedUser","find","user","placeholder","_c","$RefreshReg$"],"sources":["/Users/dazzlinger/Desktop/start_here/TaskFlow/client/src/main/TaskFlow.tsx"],"sourcesContent":["import { type  FC } from 'react'\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\nimport Column from 'main/components/Column' \nimport Card from 'main/components/Card' \nimport useTaskFlow from 'main/hook'\n\nconst TaskFlow: FC = () => {\n  const {\n    loading,\n    error,\n    columns,\n    users,\n    onDeleteCard,\n    onDragEnd,\n    setDraggedCard,\n    onUserSelect,\n    onAddCard\n  } = useTaskFlow()\n\n  if (loading) return <p>Loading...</p>\n  if (error) return <p>Error: {error.message}</p>\n\n  return (\n    <DragDropContext onDragStart={(start) => setDraggedCard(start.draggableId)} onDragEnd={onDragEnd}>\n      <div className=\"grid grid-cols-3 grid-rows-1 gap-4\">\n        {columns?.map((column) => (\n          <Droppable droppableId={String(column.id)} key={column.id}>\n            {(provided) => (\n              <div ref={provided.innerRef} {...provided.droppableProps} className=\"grid min-w-[240px] auto-cols-min rounded bg-gray-100 p-4\">\n                <Column\n                  key={column.id}\n                  id={column.id}\n                  title={column.title}\n                  onAddCard={onAddCard} // Passed from useTaskFlow hook\n                >\n                  {column.cards.map((card, index) => (\n                    <Card\n                      key={card.id}\n                      id={card.id}\n                      index={index}\n                      text={card.text}\n                      assignedUser={users.find(user => user.id === card.assignedUser) ?? null}\n                      users={users}\n                      onUserSelect={onUserSelect}\n                      onDeleteCard={() => onDeleteCard(card.id)}\n                    />\n                  ))}\n                  {provided.placeholder}\n                </Column>\n              </div>\n            )}\n          </Droppable>\n        ))}\n      </div>\n    </DragDropContext>\n  )\n}\n\nexport default TaskFlow\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}