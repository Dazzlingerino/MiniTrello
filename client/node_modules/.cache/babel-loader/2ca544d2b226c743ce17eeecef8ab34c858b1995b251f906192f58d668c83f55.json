{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { GET_COLUMNS, ADD_CARD, MOVE_CARD, DELETE_CARD, CHANGE_USER } from '../graphql/queries';\nconst useTaskFlow = () => {\n  _s();\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_COLUMNS);\n  const [columns, setColumns] = useState([]);\n  const [addCardMutation] = useMutation(ADD_CARD);\n  const [moveCardMutation] = useMutation(MOVE_CARD);\n  const [deleteCardMutation] = useMutation(DELETE_CARD);\n  const [changeUserMutation] = useMutation(CHANGE_USER);\n  const [newCardText, setNewCardText] = useState('');\n  const [draggedCard, setDraggedCard] = useState(null);\n  const [users, setUsers] = useState([]);\n  const handleAddCard = async columnId => {\n    await addCardMutation({\n      variables: {\n        columnId,\n        text: newCardText\n      },\n      update: (cache, {\n        data: {\n          addCard\n        }\n      }) => {\n        const existingData = cache.readQuery({\n          query: GET_COLUMNS\n        });\n        if (!existingData) return;\n        const newColumns = existingData.getColumns.map(column => {\n          if (column.id === columnId) {\n            return {\n              ...column,\n              cards: [...column.cards, addCard]\n            };\n          }\n          return column;\n        });\n        cache.writeQuery({\n          query: GET_COLUMNS,\n          data: {\n            getColumns: newColumns\n          }\n        });\n      }\n    });\n    setNewCardText('');\n  };\n  const handleDeleteCard = async cardId => {\n    await deleteCardMutation({\n      variables: {\n        cardId\n      }\n    });\n  };\n  const handleDragEnd = async result => {\n    const {\n      draggableId,\n      source,\n      destination\n    } = result;\n\n    // Check if there's a destination and the card is moved to a new place\n    if (!destination || destination.droppableId === source.droppableId && destination.index === source.index) {\n      return; // Do nothing if there's no destination or the card was dropped back to its original place\n    }\n\n    // Ensure both the source and destination columns are found\n    const existingData = cache.readQuery({\n      query: GET_COLUMNS\n    });\n    if (!existingData) return;\n    const sourceColumn = existingData.getColumns.find(column => column.id === source.droppableId);\n    const destinationColumn = existingData.getColumns.find(column => column.id === destination.droppableId);\n    if (!sourceColumn || !destinationColumn) {\n      console.error('Couldn\\'t find source or destination columns');\n      return; // Exit if we couldn't find the source or destination columns\n    }\n\n    // Clone the columns to avoid directly mutating the cache data\n    const newSourceColumn = {\n      ...sourceColumn,\n      cards: [...sourceColumn.cards]\n    };\n    const newDestinationColumn = {\n      ...destinationColumn,\n      cards: [...destinationColumn.cards]\n    };\n\n    // Move the card from the source column to the destination column\n    const cardIndex = newSourceColumn.cards.findIndex(card => card.id === draggableId);\n    if (cardIndex === -1) {\n      console.error('Couldn\\'t find the card in the source column');\n      return; // Exit if the card isn't found in the source column\n    }\n    const [movedCard] = newSourceColumn.cards.splice(cardIndex, 1);\n    newDestinationColumn.cards.splice(destination.index, 0, movedCard);\n\n    // Update the Apollo cache with the new columns\n    cache.writeQuery({\n      query: GET_COLUMNS,\n      data: {\n        getColumns: existingData.getColumns.map(column => {\n          if (column.id === source.droppableId) return newSourceColumn;\n          if (column.id === destination.droppableId) return newDestinationColumn;\n          return column;\n        })\n      }\n    });\n  };\n  const assignUserToCard = async (cardId, userId) => {\n    await changeUserMutation({\n      variables: {\n        cardId,\n        assignedUser: userId\n      }\n      // Cache update logic here\n    });\n  };\n  useEffect(() => {\n    if (!loading && data) {\n      setColumns(data.getColumns || []);\n      setUsers(data.getUsers || []);\n    }\n  }, [loading, data]);\n  return {\n    loading,\n    error,\n    columns,\n    newCardText,\n    draggedCard,\n    users,\n    setNewCardText,\n    setDraggedCard,\n    handleAddCard,\n    handleDragEnd,\n    handleDeleteCard,\n    assignUserToCard\n  };\n};\n_s(useTaskFlow, \"LffhRVbkpX8S4toBrUv6twPdZhk=\", false, function () {\n  return [useQuery, useMutation, useMutation, useMutation, useMutation];\n});\nexport default useTaskFlow;","map":{"version":3,"names":["useEffect","useState","useMutation","useQuery","GET_COLUMNS","ADD_CARD","MOVE_CARD","DELETE_CARD","CHANGE_USER","useTaskFlow","_s","loading","error","data","columns","setColumns","addCardMutation","moveCardMutation","deleteCardMutation","changeUserMutation","newCardText","setNewCardText","draggedCard","setDraggedCard","users","setUsers","handleAddCard","columnId","variables","text","update","cache","addCard","existingData","readQuery","query","newColumns","getColumns","map","column","id","cards","writeQuery","handleDeleteCard","cardId","handleDragEnd","result","draggableId","source","destination","droppableId","index","sourceColumn","find","destinationColumn","console","newSourceColumn","newDestinationColumn","cardIndex","findIndex","card","movedCard","splice","assignUserToCard","userId","assignedUser","getUsers"],"sources":["/Users/dazzlinger/Desktop/start_here/TaskFlow/client/src/main/hook.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { DropResult } from 'react-beautiful-dnd'\nimport { useMutation, useQuery } from '@apollo/client'\nimport { GET_COLUMNS, ADD_CARD, MOVE_CARD, DELETE_CARD, CHANGE_USER } from '../graphql/queries'\nimport { type User, type BoardData, type Column, type Card } from './types'\n\nexport interface UseTaskFlowReturn {\n  loading: boolean;\n  error: Error | undefined;\n  columns: Column[] | undefined;\n  newCardText: string;\n  draggedCard: string | null;\n  users: User[];\n  setNewCardText: (text: string) => void;\n  setDraggedCard: (cardId: string | null) => void;\n  handleAddCard: (columnId: string) => Promise<void>;\n  handleDragEnd: (result: any) =>  Promise<void>;\n  handleDeleteCard: (cardId: string) => Promise<void>;\n  assignUserToCard: (cardId: string, userId: string) => Promise<void>;\n}\n\nconst useTaskFlow = (): UseTaskFlowReturn => {\n  const { loading, error, data } = useQuery<BoardData>(GET_COLUMNS)\n  const [columns, setColumns] = useState<Column[]>([])\n  const [addCardMutation] = useMutation(ADD_CARD)\n  const [moveCardMutation] = useMutation(MOVE_CARD)\n  const [deleteCardMutation] = useMutation(DELETE_CARD)\n  const [changeUserMutation] = useMutation(CHANGE_USER)\n  const [newCardText, setNewCardText] = useState('')\n  const [draggedCard, setDraggedCard] = useState<string | null>(null)\n  const [users, setUsers] = useState<User[]>([])\n\n  const handleAddCard = async (columnId: string) => {\n    await addCardMutation({\n      variables: { columnId, text: newCardText },\n      update: (cache, { data: { addCard } }) => {\n        const existingData = cache.readQuery<{ getColumns: Column[] }>({ query: GET_COLUMNS })\n        if (!existingData) return\n  \n        const newColumns = existingData.getColumns.map((column: Column) => {\n          if (column.id === columnId) {\n            return { ...column, cards: [...column.cards, addCard] }\n          }\n          return column\n        })\n  \n        cache.writeQuery({\n          query: GET_COLUMNS,\n          data: { getColumns: newColumns }\n        })\n      }\n    })\n    setNewCardText('')\n  }\n\n  const handleDeleteCard = async (cardId: string) => {\n    await deleteCardMutation({\n      variables: { cardId }\n    })\n  }\n\n  const handleDragEnd = async (result) => {\n    const { draggableId, source, destination } = result\n  \n    // Check if there's a destination and the card is moved to a new place\n    if (!destination || (destination.droppableId === source.droppableId && destination.index === source.index)) {\n      return // Do nothing if there's no destination or the card was dropped back to its original place\n    }\n  \n    // Ensure both the source and destination columns are found\n    const existingData = cache.readQuery<BoardData>({ query: GET_COLUMNS })\n    if (!existingData) return\n  \n    const sourceColumn = existingData.getColumns.find(column => column.id === source.droppableId)\n    const destinationColumn = existingData.getColumns.find(column => column.id === destination.droppableId)\n  \n    if (!sourceColumn || !destinationColumn) {\n      console.error('Couldn\\'t find source or destination columns')\n      return // Exit if we couldn't find the source or destination columns\n    }\n  \n    // Clone the columns to avoid directly mutating the cache data\n    const newSourceColumn = { ...sourceColumn, cards: [...sourceColumn.cards] }\n    const newDestinationColumn = { ...destinationColumn, cards: [...destinationColumn.cards] }\n  \n    // Move the card from the source column to the destination column\n    const cardIndex = newSourceColumn.cards.findIndex(card => card.id === draggableId)\n    if (cardIndex === -1) {\n      console.error('Couldn\\'t find the card in the source column')\n      return // Exit if the card isn't found in the source column\n    }\n    const [movedCard] = newSourceColumn.cards.splice(cardIndex, 1)\n    newDestinationColumn.cards.splice(destination.index, 0, movedCard)\n  \n    // Update the Apollo cache with the new columns\n    cache.writeQuery({\n      query: GET_COLUMNS,\n      data: {\n        getColumns: existingData.getColumns.map(column => {\n          if (column.id === source.droppableId) return newSourceColumn\n          if (column.id === destination.droppableId) return newDestinationColumn\n          return column\n        })\n      }\n    })\n  }\n  \n  const assignUserToCard = async (cardId: string, userId: string) => {\n    await changeUserMutation({\n      variables: { cardId, assignedUser: userId }\n      // Cache update logic here\n    })\n  }\n\n  useEffect(() => {\n    if (!loading && data) {\n      setColumns(data.getColumns || [])\n      setUsers(data.getUsers || [])\n    }\n  }, [loading, data])\n\n  return {\n    loading,\n    error,\n    columns,\n    newCardText,\n    draggedCard,\n    users,\n    setNewCardText,\n    setDraggedCard,\n    handleAddCard,\n    handleDragEnd,\n    handleDeleteCard,\n    assignUserToCard\n  }\n}\n\nexport default useTaskFlow\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}