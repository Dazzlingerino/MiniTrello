{"ast":null,"code":"var _jsxFileName = \"/Users/dazzlinger/Desktop/start_here/TaskFlow/client/src/main/components/Card.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport UsersList from './UsersList';\nimport IconSVG from './inlineImages';\nimport { AVATAR_COLORS, DEFAULT_AVATAR_COLOR } from 'main/constants';\nimport generateColorForString from 'main/utils/generateColorForString';\nimport Modal from './Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Card = ({\n  id,\n  index,\n  text,\n  assignedUser,\n  users,\n  onUserSelect,\n  onDeleteCard,\n  onAddText\n}) => {\n  _s();\n  const [showUserList, setShowUserList] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const handleUserSelectInternal = async user => {\n    await onUserSelect(id, user);\n    setSelectedUser(user);\n    setShowUserList(false);\n  };\n\n  // Example of a delete button as an action for the modal\n  const deleteActionButton = /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => {\n      onDeleteCard().then(() => setIsModalOpen(false)); // Close modal after delete\n    },\n    className: \"rounded bg-red-500 px-4 py-2 text-white hover:bg-red-600\",\n    children: \"Delete\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Draggable, {\n    draggableId: id,\n    index: index,\n    children: provided => {\n      var _selectedUser$name;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: provided.innerRef,\n        ...provided.draggableProps,\n        ...provided.dragHandleProps,\n        className: \"mb-2 flex flex-col space-y-2 rounded bg-white p-2 shadow\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setShowUserList(!showUserList),\n              className: \"outline-none focus:outline-none\",\n              children: /*#__PURE__*/_jsxDEV(IconSVG.Person, {\n                color: generateColorForString((_selectedUser$name = selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.name) !== null && _selectedUser$name !== void 0 ? _selectedUser$name : '', AVATAR_COLORS, DEFAULT_AVATAR_COLOR)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setIsModalOpen(true),\n              className: \"outline-none focus:outline-none\",\n              children: /*#__PURE__*/_jsxDEV(IconSVG.ThreeDots, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), showUserList && /*#__PURE__*/_jsxDEV(UsersList, {\n          users: users,\n          showUserList: showUserList,\n          onUserSelect: handleUserSelectInternal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), isModalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n          isOpen: isModalOpen,\n          onClose: () => setIsModalOpen(false),\n          actionButtons: deleteActionButton,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Custom content for this modal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(Card, \"9GLYacqssiAozu8rCegt099s18Y=\");\n_c = Card;\nexport default Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["useState","Draggable","UsersList","IconSVG","AVATAR_COLORS","DEFAULT_AVATAR_COLOR","generateColorForString","Modal","jsxDEV","_jsxDEV","Card","id","index","text","assignedUser","users","onUserSelect","onDeleteCard","onAddText","_s","showUserList","setShowUserList","selectedUser","setSelectedUser","isModalOpen","setIsModalOpen","handleUserSelectInternal","user","deleteActionButton","onClick","then","className","children","fileName","_jsxFileName","lineNumber","columnNumber","draggableId","provided","_selectedUser$name","ref","innerRef","draggableProps","dragHandleProps","Person","color","name","ThreeDots","isOpen","onClose","actionButtons","_c","$RefreshReg$"],"sources":["/Users/dazzlinger/Desktop/start_here/TaskFlow/client/src/main/components/Card.tsx"],"sourcesContent":["import { type FC, useState } from 'react'\nimport { Draggable } from 'react-beautiful-dnd'\n\nimport UsersList from './UsersList' \nimport IconSVG from './inlineImages'\nimport { type User } from 'main/types' \nimport { AVATAR_COLORS, DEFAULT_AVATAR_COLOR } from 'main/constants'\nimport generateColorForString from 'main/utils/generateColorForString'\nimport Modal from './Modal' \n\ninterface CardProps {\n  id: string\n  index: number\n  text: string\n  assignedUser: User | null\n  users: User[]\n  onUserSelect: (cardId: string, user: User) => Promise<void>\n  onDeleteCard: () => Promise<void>\n  onAddText: (text: string) => void\n}\n\nconst Card: FC<CardProps> = ({\n  id,\n  index,\n  text,\n  assignedUser,\n  users,\n  onUserSelect,\n  onDeleteCard,\n  onAddText\n}) => {\n  const [showUserList, setShowUserList] = useState(false)\n  const [selectedUser, setSelectedUser] = useState<User | null>(null)\n  const [isModalOpen, setIsModalOpen] = useState(false)\n\n  const handleUserSelectInternal = async (user: User) => {\n    await onUserSelect(id, user)\n    setSelectedUser(user)\n    setShowUserList(false)\n  }\n\n  // Example of a delete button as an action for the modal\n  const deleteActionButton = (\n    <button\n      onClick={() => {\n        onDeleteCard().then(() => setIsModalOpen(false)) // Close modal after delete\n      }}\n      className=\"rounded bg-red-500 px-4 py-2 text-white hover:bg-red-600\"\n    >\n      Delete\n    </button>\n  )\n\n  return (\n    <Draggable draggableId={id} index={index}>\n      {(provided) => (\n        <div\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          className=\"mb-2 flex flex-col space-y-2 rounded bg-white p-2 shadow\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <p>{text}</p>\n            <div className=\"flex items-center space-x-2\">\n              <button onClick={() => setShowUserList(!showUserList)} className=\"outline-none focus:outline-none\">\n                <IconSVG.Person color={generateColorForString(selectedUser?.name ?? '', AVATAR_COLORS, DEFAULT_AVATAR_COLOR)} />\n              </button>\n              <button onClick={() => setIsModalOpen(true)} className=\"outline-none focus:outline-none\">\n                <IconSVG.ThreeDots />\n              </button>\n            </div>\n          </div>\n          {showUserList && (\n            <UsersList\n              users={users}\n              showUserList={showUserList}\n              onUserSelect={handleUserSelectInternal}\n            />\n          )}\n          {isModalOpen && (\n            <Modal\n              isOpen={isModalOpen}\n              onClose={() => setIsModalOpen(false)}\n              actionButtons={deleteActionButton}\n            >\n              <div>Custom content for this modal</div>\n            </Modal>\n          )}\n        </div>\n      )}\n    </Draggable>\n  )\n}\n\nexport default Card\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}